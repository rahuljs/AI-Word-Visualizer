import { GoogleGenAI, Type } from "@google/genai";

if (!process.env.API_KEY) {
    throw new Error("API_KEY environment variable not set");
}

const ai = new GoogleGenAI({ apiKey: process.env.API_KEY });

interface RelatedWordsResponse {
    opposite: string;
    similar: string;
    genZ: string;
    translation: string;
    pronunciation: string;
}

export const getRelatedWords = async (word: string, language: string): Promise<RelatedWordsResponse> => {
    try {
        const response = await ai.models.generateContent({
            model: "gemini-2.5-flash",
            contents: `For the word "${word}", provide a single common opposite word (antonym), a single common similar word (synonym), a modern Gen-Z slang equivalent, its translation in the ${language} language, and a simple phonetic pronunciation of the ${language} word.`,
            config: {
                responseMimeType: "application/json",
                responseSchema: {
                    type: Type.OBJECT,
                    properties: {
                        opposite: { 
                            type: Type.STRING,
                            description: 'A single common word that is the opposite of the input word.'
                        },
                        similar: { 
                            type: Type.STRING,
                            description: 'A single common word that is similar to the input word.'
                        },
                        genZ: {
                            type: Type.STRING,
                            description: 'A modern Gen-Z slang word or phrase equivalent to the input word.'
                        },
                        translation: {
                            type: Type.STRING,
                            description: `The translation of the input word in ${language} script.`
                        },
                        pronunciation: {
                            type: Type.STRING,
                            description: `A simple, romanized phonetic pronunciation of the ${language} translation.`
                        }
                    },
                    required: ["opposite", "similar", "genZ", "translation", "pronunciation"],
                },
            },
        });

        const jsonText = response.text.trim();
        const parsed: RelatedWordsResponse = JSON.parse(jsonText);
        return parsed;

    } catch (error) {
        console.error("Error fetching related words:", error);
        throw new Error("Could not fetch related words. The AI model might be unable to process the request.");
    }
};

export const generateCartoonImage = async (promptWord: string): Promise<string> => {
    try {
        const response = await ai.models.generateImages({
            model: 'imagen-4.0-generate-001',
            prompt: `A vibrant, simple, and cute cartoon illustration of the concept: "${promptWord}". Minimalist vector style with bold outlines, on a clean, solid light gray background.`,
            config: {
              numberOfImages: 1,
              outputMimeType: 'image/jpeg',
              aspectRatio: '1:1',
            },
        });

        if (response.generatedImages && response.generatedImages.length > 0) {
            const base64ImageBytes = response.generatedImages[0].image.imageBytes;
            return `data:image/jpeg;base64,${base64ImageBytes}`;
        } else {
            throw new Error("No image was generated by the API.");
        }
    } catch (error) {
        console.error(`Error generating image for "${promptWord}":`, error);
        throw new Error(`Failed to generate an image for "${promptWord}".`);
    }
};
